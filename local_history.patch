Index: X2_UlloaDeLaCalle.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/X2_UlloaDeLaCalle.c b/X2_UlloaDeLaCalle.c
--- a/X2_UlloaDeLaCalle.c	
+++ b/X2_UlloaDeLaCalle.c	(date 1701641089750)
@@ -5,7 +5,6 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <unistd.h>
 #include <ctype.h>
 #include <stdbool.h>
 #include <pthread.h>
@@ -46,18 +45,18 @@
 
 // Variables GLOBALES :)
 pthread_cond_t cond_proveedor = PTHREAD_COND_INITIALIZER;
-sem_t semaforoFichero, semaforoBuffer, semaforoLista, semaforoContadorBuffer;
+sem_t semaforoFichero, semaforoBuffer, semaforoLista, semaforoContadorBuffer, semaforoSharedData;
 Producto *buffer;
 int contBuffer = 0;
-ConsumidorInfo *listaProductos;
+ConsumidorInfo *listaConsumidores;
 
-void proveedorFunc(void *data);
+void proveedorFunc(SharedData *data);
 
-void consumidorFunc(void *data);
+void consumidorFunc(SharedData *data);
 
 ConsumidorInfo *initListaProducto(ConsumidorInfo *lista);
 
-ConsumidorInfo *agregarProducto(ConsumidorInfo *producto, int productosConsumidos, int *productosConsumidosPorTipo, int ID);
+ConsumidorInfo *agregarConsumidor(ConsumidorInfo *producto, int productosConsumidos, int *productosConsumidosPorTipo, int ID);
 
 void facturador(SharedData* sharedData);
 
@@ -70,7 +69,7 @@
     char *path = argv[1];
     int arg3 = atoi(argv[3]), arg4 = atoi(argv[4]), arg5 = atoi(argv[5]);
     SharedData sharedData;
-    listaProductos = initListaProducto(listaProductos);
+    listaConsumidores = initListaProducto(listaConsumidores);
     FILE *file, *outputFile;
 
 
@@ -128,6 +127,9 @@
     sem_init(semaforoFichero, 0, 1);
     sem_init(semaforoBuffer, 0, 1);
     sem_init(semaforoLista, 0, 1);
+    sem_init(semaforoContadorBuffer, 0, 1);
+    sem_init(semaforoSharedData, 0, 1);
+
 
 
     // Crear hilo del proveedor
@@ -142,63 +144,73 @@
     pthread_join(proveedorThread, NULL);
     pthread_join(consumidorThread, NULL);
 
-
-    printf_s("Hola");
-
     // Facturador
     facturador(&sharedData);
 
-    printf_s("Hola");
-
 
     // Destruir semáforos y liberar memoria
     sem_destroy(&semaforoFichero);
     sem_destroy(&semaforoBuffer);
     sem_destroy(&semaforoLista);
+    sem_destroy(&semaforoSharedData);
+    sem_destroy(&semaforoContadorBuffer);
+
     fclose(outputFile);
     free(buffer);
-    return 0;
+    //return 0;
 }
 
-void proveedorFunc(void *data) {
-    SharedData *sharedData = (SharedData *) data;
+void proveedorFunc(SharedData *sharedData) {
     FILE *file, *outputFile;
     char c;
     int productosLeidos = 0, productosValidos = 0, productosInvalidos = 0, proveedorID = 0;
     TotalProductos totalProductos = {{0}};
 
+
+
+    ////////////////////////////////////////////////////
+    printf_s("%s\n", sharedData->ruta);
+    printf_s("debug1\n");
+
     // Abrir el archivo de entrada del proveedor
     file = fopen(sharedData->ruta, "r");
 
+    printf_s("debug2\n");
+    ////////////////////////////////////////////////////
+
+
+
     // Leer y procesar productos del archivo
-    while ((c = fgetc(file)) != EOF) {
+    while ((c = (char) fgetc(file)) != EOF) {
         productosLeidos++;
 
+        printf_s("hola1");
+
         if (esTipoValido(c)) {
-            // Procesar productos válidos
-            // Incluir semáforo de exclusión mutua para la escritura en el búfer
-            sem_wait(&semaforoFichero);
+            // Incluir semáforo para escritura en el búfer
+            sem_wait(&semaforoBuffer);
             // Escribir en el búfer
             buffer[sharedData->in].tipo = c;
             buffer[sharedData->in].proveedorID = proveedorID;
             sharedData->in = (sharedData->in + 1) % sharedData->T;
+
+            sem_post(&semaforoBuffer);
             // Incrementar contador de productos válidos
             productosValidos++;
             // Actualizar registro de productos
             totalProductos.total[c - 'a']++;
-            // Liberar semáforo de exclusión mutua
-            sem_post(&semaforoFichero);
         } else {
             // Procesar productos inválidos
             productosInvalidos++;
         }
     }
     fclose(file); // Cerrar el archivo
+    sem_post(semaforoFichero);
 
     // Escribir resultados en el archivo de salida
     outputFile = fopen(sharedData->fichDestino, "w");
     if (outputFile == NULL) {
-        fprintf(stderr, "Error al abrir el archivo de salida del proveedor %d.\n", sharedData->P);
+        fprintf(stderr, "Error al abrir el archivo de salida del proveedor %d.\n", 0);
         free(buffer);
         return;
     }
@@ -219,40 +231,44 @@
     pthread_cond_signal(&cond_proveedor);
 }
 
-void consumidorFunc(void *data) {
-    SharedData *sharedData = (SharedData *) data;
-    int consumidorID = 0, bandera = 0, arrayConsumidores['j' - 'a' + 1];
+void consumidorFunc(SharedData *sharedData) {
+    int consumidorID = 0, bandera = 0, numeroProductosConsumidosPorTipo['j' - 'a' + 1], numeroProductosConsumidos = 0;
     Producto productoConsumido;
-    
 
-    ConsumidorInfo* consumidor = (ConsumidorInfo*)malloc(sizeof(ConsumidorInfo));
-    consumidor->consumidorID = consumidorID;
-    consumidor->productosConsumidos = 0;
-    memset(consumidor->productosConsumidosPorTipo, 0, sizeof(consumidor->productosConsumidosPorTipo));
-    consumidor->siguiente = NULL;
+    // Incializar numeroProductosConsumidosPorTipo[]
+    for (int i = 0; i < 9; ++i) {
+        numeroProductosConsumidosPorTipo[i] = 0;
+    }
 
     // Consumir productos del búfer
     while (bandera != 1) {
 
         // Leer del buffer
         sem_wait(semaforoContadorBuffer);
-        //bandera = (contBuffer >= sharedData->T) ? 0 : 1; // Sale si ve que es la última o ya se ha pasado
         sem_wait(semaforoBuffer);
         productoConsumido = buffer[contBuffer];
+
+        sem_wait(semaforoSharedData);
         if (contBuffer+1 >= sharedData->T || esTipoValido(productoConsumido.tipo)) {bandera = 1;}
         sem_post(semaforoBuffer);
 
+        numeroProductosConsumidos++; // Incremento de contador general
+        printf_s("%s", productoConsumido.tipo);
+        printf_s("%d", productoConsumido.proveedorID);
+        numeroProductosConsumidosPorTipo[productoConsumido.tipo + 'a']++; // Incremento de contador del tipo correspondiente
+
+        //Se actualiza el contador del buffer
+        contBuffer = (contBuffer + 1) % sharedData->T;
+        sem_post(semaforoSharedData);
+        sem_post(semaforoContadorBuffer);
+    }
 
-        // Escribe en la lista el producto leido del buffer (lentamente perdiendo la cordura)
-        sem_wait(semaforoLista);
-        listaProductos = agregarProducto(listaProductos, productoConsumido.tipo, , productoConsumido.proveedorID); //hay que pasarle prodConsPorTipo
-        sem_post(semaforoLista);
+    // Escribe en la lista el producto leido del buffer (lentamente perdiendo la cordura)
+    sem_wait(semaforoLista);
+    printf("%d, %d, %d\n", numeroProductosConsumidos, numeroProductosConsumidosPorTipo[0], numeroProductosConsumidosPorTipo[2]);
+    listaConsumidores = agregarConsumidor(listaConsumidores, numeroProductosConsumidos, numeroProductosConsumidosPorTipo, productoConsumido.proveedorID); //hay que pasarle prodConsPorTipo
+    sem_post(semaforoLista);
 
-        //Se actualiza el contador del buffer
-        contBuffer = (contBuffer + 1) % sharedData->T;
-        sem_post(semaforoContadorBuffer);
-    }
-
     // Salir de la función del consumidor
     pthread_exit(NULL);
 }
@@ -263,23 +279,24 @@
     int arrayConsumidores[sharedData->C]['j' - 'a' + 1], productosPorContador[sharedData->C];
 
     printf_s("Hola");
+    sem_wait(semaforoLista);
 
     // Agregar a la lista
-    while (listaProductos != NULL) {
-        printf("%c,%d\n", listaProductos->tipo, listaProductos->proveedorID);
-        //Contadores de productos, uno por tipos y uno por consumidores.
-        arrayConsumidores[listaProductos->proveedorID][listaProductos->tipo - 'a']++;
-        productosPorContador[listaProductos->proveedorID]++;
-        listaProductos = listaProductos->siguiente;
-    }
+/*    while (listaConsumidores != NULL) {
+        printf("%c,%d\n", listaConsumidores->tipo, listaConsumidores->proveedorID);
+        // Contadores de productos, uno por tipos y uno por consumidores
+        arrayConsumidores[listaConsumidores->proveedorID][listaConsumidores->tipo - 'a']++;
+        productosPorContador[listaConsumidores->proveedorID]++;
+        listaConsumidores = listaConsumidores->siguiente;
+    }*/
     outputFile = fopen(sharedData->fichDestino, "a");
 
 
     for (int i = 0; i < sharedData->C; ++i) {
-        fprintf(outputFile, "Consumidor: %d\n", sharedData->P);
+        fprintf(outputFile, "Consumidor: %d\n", i);
         fprintf(outputFile, "Productos Consumidos: %d. De los cuales:\n", productosPorContador[i]);
 
-        for (int j = 0; j < sizeof(arrayConsumidores[0]); ++j) {
+        for (int j = 0; j < ('j' - 'a' + 1); ++j) {
             fprintf(outputFile, "Producto tipo \"%c\": %d\n", (char)(j+'a'), arrayConsumidores[i][j]);
         }
 
@@ -309,22 +326,22 @@
     return lista;
 }
 
-ConsumidorInfo *agregarProducto(ConsumidorInfo *producto, int productosConsumidos, int *productosConsumidosPorTipo, int ID) {
-    ConsumidorInfo *nuevoProducto;
+ConsumidorInfo *agregarConsumidor(ConsumidorInfo *producto, int productosConsumidos, int *productosConsumidosPorTipo, int ID) {
+    ConsumidorInfo *nuevoConsumidor;
     ConsumidorInfo *aux;
-    nuevoProducto = (ConsumidorInfo *) malloc(sizeof(ConsumidorInfo));
-    nuevoProducto->productosConsumidos = productosConsumidos;
-    memcpy(nuevoProducto->productosConsumidosPorTipo, productosConsumidosPorTipo, sizeof(nuevoProducto->productosConsumidosPorTipo));
-    nuevoProducto->consumidorID = ID;
-    nuevoProducto->siguiente = NULL;
+    nuevoConsumidor = (ConsumidorInfo *) malloc(sizeof(ConsumidorInfo));
+    nuevoConsumidor->productosConsumidos = productosConsumidos;
+    memcpy(nuevoConsumidor->productosConsumidosPorTipo, productosConsumidosPorTipo, sizeof(nuevoConsumidor->productosConsumidosPorTipo));
+    nuevoConsumidor->consumidorID = ID;
+    nuevoConsumidor->siguiente = NULL;
     if (producto == NULL){
-        producto = nuevoProducto;
+        producto = nuevoConsumidor;
     } else {
         aux = producto;
         while (aux->siguiente != NULL) {
             aux = aux->siguiente;
         }
-        aux->siguiente = nuevoProducto;
+        aux->siguiente = nuevoConsumidor;
     }
     return producto;
 }
\ No newline at end of file
